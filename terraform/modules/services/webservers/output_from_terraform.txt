maks@linux-mint:~/Learning/terraform_learning/terraform_2nd_demo/terraform-home/terraform/prod/services/webservers$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.webservers.aws_instance.ubuntu_instance7878787 will be created
  + resource "aws_instance" "ubuntu_instance7878787" {
      + ami                                  = "ami-0b9064170e32bde34"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "publicKey"
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"      = "web-prod"
          + "ita_group" = "Dp_206"
        }
      + tags_all                             = {
          + "Name"      = "web-prod"
          + "ita_group" = "Dp_206"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "016f3ec484d76755b2cc58636280b68aad9cf70a"
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.webservers.aws_internet_gateway.demo2-igw will be created
  + resource "aws_internet_gateway" "demo2-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"      = "demo2-igw"
          + "ita_group" = "Dp_206"
        }
      + tags_all = {
          + "Name"      = "demo2-igw"
          + "ita_group" = "Dp_206"
        }
      + vpc_id   = (known after apply)
    }

  # module.webservers.aws_key_pair.ec2key will be created
  + resource "aws_key_pair" "ec2key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "publicKey"
      + key_pair_id = (known after apply)
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCtHOb92qywIiLhzPjxetKzJn0sIDSXXkmMUFDMlbdXAWaFwZJsfZ9xuSVH9uKIO3Y7OcMwWHtih/W6+dybZYfLCncbxHjggG51unSUPZmbSfE2Td7d1vqDCaqnFHbPpqms9N+ZV+U3wF/F8BmnyDQlItf8Wpu9jIRy4fpDv9VsaUh2hvAw3/mm55gNHeJ0D26sl5W5Qco3Ru2/at3tUxuI0vILC/zt+1t2KzB+/H3uSXwCGQVP5jn7A/wJ1OGppLgxjNyZEQFJiRmJ+nL8+pfEb24u7XAE+ACqVRqc1U85Jo9E1AH48m8S+hG8hwIOWCGM208V66RUNCqtAcHNS7doEdgKV0Ih5G6ffme33oD8h624dXm8WQNW32Xd9ADkP14wFN6mIusTwqvC51W4aB047Cf3UUT6Z84p5fXhLyw5K22Hbjt/OOKw2zPgwFvVvl58DKHmTAofUjEnSL1jVgacayxI3MCczLGkGDyIl4b1vjBpGkI4+WHKMznZ5Hrm1YtLEIr68zhwtXN0IrrsZE2NxUgNBF9QP7TO2meFwMTEb4wnwJAmFJn3D/fMq8amV88ZmG4I0HW4hCPNufZ1ikeovcy73EmK6gzsTL8mb9+uiNRlJjeGQINB9eJlA/s8OAboW5AdtEqZOcpGn3eOjgcAKevVjvidkX7vIyojhVzdbQ== maksym.chihin@gmail.com"
      + tags        = {
          + "ita_group" = "Dp_206"
        }
      + tags_all    = {
          + "ita_group" = "Dp_206"
        }
    }

  # module.webservers.aws_route_table.demo2-public-crt will be created
  + resource "aws_route_table" "demo2-public-crt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name"      = "demo2-public-crt"
          + "ita_group" = "Dp_206"
        }
      + tags_all         = {
          + "Name"      = "demo2-public-crt"
          + "ita_group" = "Dp_206"
        }
      + vpc_id           = (known after apply)
    }

  # module.webservers.aws_route_table_association.demo2-crta-public-subnet-1 will be created
  + resource "aws_route_table_association" "demo2-crta-public-subnet-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.webservers.aws_security_group.http will be created
  + resource "aws_security_group" "http" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "web-prod-http-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "ita_group" = "Dp_206"
        }
      + tags_all               = {
          + "ita_group" = "Dp_206"
        }
      + vpc_id                 = (known after apply)
    }

  # module.webservers.aws_security_group.ssh will be created
  + resource "aws_security_group" "ssh" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "web-prod-ssh-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "ita_group" = "Dp_206"
        }
      + tags_all               = {
          + "ita_group" = "Dp_206"
        }
      + vpc_id                 = (known after apply)
    }

  # module.webservers.aws_subnet.demo2-public-1 will be created
  + resource "aws_subnet" "demo2-public-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.16.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"      = "demo2-public-1"
          + "ita_group" = "Dp_206"
        }
      + tags_all                        = {
          + "Name"      = "demo2-public-1"
          + "ita_group" = "Dp_206"
        }
      + vpc_id                          = (known after apply)
    }

  # module.webservers.aws_vpc.demo2-vpc will be created
  + resource "aws_vpc" "demo2-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "172.16.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = false
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"      = "demo2-vpc"
          + "ita_group" = "Dp_206"
        }
      + tags_all                         = {
          + "Name"      = "demo2-vpc"
          + "ita_group" = "Dp_206"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_dns = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.




maks@linux-mint:~/Learning/terraform_learning/terraform_2nd_demo/terraform-home/terraform/prod/services/webservers$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.webservers.aws_instance.ubuntu_instance7878787 will be created
  + resource "aws_instance" "ubuntu_instance7878787" {
      + ami                                  = "ami-0b9064170e32bde34"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "publicKey"
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name"      = "web-prod"
          + "ita_group" = "Dp_206"
        }
      + tags_all                             = {
          + "Name"      = "web-prod"
          + "ita_group" = "Dp_206"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "016f3ec484d76755b2cc58636280b68aad9cf70a"
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.webservers.aws_internet_gateway.demo2-igw will be created
  + resource "aws_internet_gateway" "demo2-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"      = "demo2-igw"
          + "ita_group" = "Dp_206"
        }
      + tags_all = {
          + "Name"      = "demo2-igw"
          + "ita_group" = "Dp_206"
        }
      + vpc_id   = (known after apply)
    }

  # module.webservers.aws_key_pair.ec2key will be created
  + resource "aws_key_pair" "ec2key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "publicKey"
      + key_pair_id = (known after apply)
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCtHOb92qywIiLhzPjxetKzJn0sIDSXXkmMUFDMlbdXAWaFwZJsfZ9xuSVH9uKIO3Y7OcMwWHtih/W6+dybZYfLCncbxHjggG51unSUPZmbSfE2Td7d1vqDCaqnFHbPpqms9N+ZV+U3wF/F8BmnyDQlItf8Wpu9jIRy4fpDv9VsaUh2hvAw3/mm55gNHeJ0D26sl5W5Qco3Ru2/at3tUxuI0vILC/zt+1t2KzB+/H3uSXwCGQVP5jn7A/wJ1OGppLgxjNyZEQFJiRmJ+nL8+pfEb24u7XAE+ACqVRqc1U85Jo9E1AH48m8S+hG8hwIOWCGM208V66RUNCqtAcHNS7doEdgKV0Ih5G6ffme33oD8h624dXm8WQNW32Xd9ADkP14wFN6mIusTwqvC51W4aB047Cf3UUT6Z84p5fXhLyw5K22Hbjt/OOKw2zPgwFvVvl58DKHmTAofUjEnSL1jVgacayxI3MCczLGkGDyIl4b1vjBpGkI4+WHKMznZ5Hrm1YtLEIr68zhwtXN0IrrsZE2NxUgNBF9QP7TO2meFwMTEb4wnwJAmFJn3D/fMq8amV88ZmG4I0HW4hCPNufZ1ikeovcy73EmK6gzsTL8mb9+uiNRlJjeGQINB9eJlA/s8OAboW5AdtEqZOcpGn3eOjgcAKevVjvidkX7vIyojhVzdbQ== maksym.chihin@gmail.com"
      + tags        = {
          + "ita_group" = "Dp_206"
        }
      + tags_all    = {
          + "ita_group" = "Dp_206"
        }
    }

  # module.webservers.aws_route_table.demo2-public-crt will be created
  + resource "aws_route_table" "demo2-public-crt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name"      = "demo2-public-crt"
          + "ita_group" = "Dp_206"
        }
      + tags_all         = {
          + "Name"      = "demo2-public-crt"
          + "ita_group" = "Dp_206"
        }
      + vpc_id           = (known after apply)
    }

  # module.webservers.aws_route_table_association.demo2-crta-public-subnet-1 will be created
  + resource "aws_route_table_association" "demo2-crta-public-subnet-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.webservers.aws_security_group.http will be created
  + resource "aws_security_group" "http" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "web-prod-http-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "ita_group" = "Dp_206"
        }
      + tags_all               = {
          + "ita_group" = "Dp_206"
        }
      + vpc_id                 = (known after apply)
    }

  # module.webservers.aws_security_group.ssh will be created
  + resource "aws_security_group" "ssh" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "web-prod-ssh-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "ita_group" = "Dp_206"
        }
      + tags_all               = {
          + "ita_group" = "Dp_206"
        }
      + vpc_id                 = (known after apply)
    }

  # module.webservers.aws_subnet.demo2-public-1 will be created
  + resource "aws_subnet" "demo2-public-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.16.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"      = "demo2-public-1"
          + "ita_group" = "Dp_206"
        }
      + tags_all                        = {
          + "Name"      = "demo2-public-1"
          + "ita_group" = "Dp_206"
        }
      + vpc_id                          = (known after apply)
    }

  # module.webservers.aws_vpc.demo2-vpc will be created
  + resource "aws_vpc" "demo2-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "172.16.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = false
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"      = "demo2-vpc"
          + "ita_group" = "Dp_206"
        }
      + tags_all                         = {
          + "Name"      = "demo2-vpc"
          + "ita_group" = "Dp_206"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_dns = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.webservers.aws_key_pair.ec2key: Creating...
module.webservers.aws_vpc.demo2-vpc: Creating...
module.webservers.aws_key_pair.ec2key: Creation complete after 1s [id=publicKey]
module.webservers.aws_vpc.demo2-vpc: Still creating... [10s elapsed]
module.webservers.aws_vpc.demo2-vpc: Creation complete after 18s [id=vpc-08ee05e9c490d516c]
module.webservers.aws_subnet.demo2-public-1: Creating...
module.webservers.aws_security_group.ssh: Creating...
module.webservers.aws_internet_gateway.demo2-igw: Creating...
module.webservers.aws_security_group.http: Creating...
module.webservers.aws_internet_gateway.demo2-igw: Creation complete after 3s [id=igw-06c3ef950c9674fb2]
module.webservers.aws_route_table.demo2-public-crt: Creating...
module.webservers.aws_security_group.ssh: Creation complete after 5s [id=sg-035f02180af35a9f9]
module.webservers.aws_security_group.http: Creation complete after 5s [id=sg-0bd7e65b857698f24]
module.webservers.aws_route_table.demo2-public-crt: Creation complete after 2s [id=rtb-0c0bb064cc464cbc9]
module.webservers.aws_subnet.demo2-public-1: Still creating... [10s elapsed]
module.webservers.aws_subnet.demo2-public-1: Creation complete after 13s [id=subnet-0635cf80699b65c29]
module.webservers.aws_route_table_association.demo2-crta-public-subnet-1: Creating...
module.webservers.aws_instance.ubuntu_instance7878787: Creating...
module.webservers.aws_route_table_association.demo2-crta-public-subnet-1: Creation complete after 0s [id=rtbassoc-060c251af26d88e99]
╷
│ Error: Error launching source instance: UnauthorizedOperation: You are not authorized to perform this operation. Encoded authorization failure message: t-53iv4H-SnTpCMONitZffigpBfOrqfVWGNe11MCGSx2wZYNzixU-ykwz0nIKGFVzdp8FRHq7vEVj-GX9KAK1c5UYavIzeip1NurAvwkyuTw2hOd_AXHbOMuQczUGxNQ2OtL-P9G2LKZMdtpeif1rKKhZfPBRbx5bMBXAPSZURm0ARtim2D7DthIOm4yInjPBEy9JDjqvdBJn7DIMnkkJbsR0SGeLdnyCJnI7Sfqcbs2oqJLFaygXE4l3XeUaMle_rQ5sCW0RKsqJrWzeAoisiB9eVyKZNHyOczgJ7U1s1x10Cb8t2GJp1ylD2cHp8ibPXS1RabWmK4701SwQmkbgmpWnr0DNZYDDX1QXChjF5l93WZBRmehlaFB07ezKi3e4_CwRffahbML21Ytah_7vYeX3krFpytRMmVssnlFfoe7BJ7Yf5lOukCH30cx11Phy0hbfdBk0P4YgG87-g0-B_-B5XiUxhAV0ifEVWtShKpKlj9VHdk1J-9vs8p_b9I40XISn3BpcvNbZOrfj_FQ8-FvIRL1EIaYK1nr0P27dklwK1HHUzBNXXTP-nF0N8ZLKwaRy7057RvFtAS2o0uk3TW2d9muTXQF_X4LZ7H9vpzBwMXmc92zIkPwLnWV5Vku6PX2KR1mDbRuVcVr1T5hsHBehPlH3ERoSRVFh-MU3hYJZRHfGk8Qd4FudzWNp-4EG7cQKw1FyweXmTmkkeERqYHsCcrE6FAAhErxyLNgUo-LLkMMir99j1bmtD81irTL0ewXvYipK8Eh-J59ErQZ_Xu5cOgPHOeoPO4yS6ERBipY79HFYPrr
│ 	status code: 403, request id: 2115c9e3-b329-4b60-990a-b65e48959701
│ 
│   with module.webservers.aws_instance.ubuntu_instance7878787,
│   on ../../../modules/services/webservers/main.tf line 11, in resource "aws_instance" "ubuntu_instance7878787":
│   11: resource "aws_instance" "ubuntu_instance7878787" {
│ 
╵
